// Generated by CoffeeScript 1.4.0
/*global define
*/

define(['d3layout'], function(d3) {
  'use strict';

  var characterWidth, draw, getDepth, hasChildren, maxLabelLength, nodeRadius;
  maxLabelLength = 30;
  nodeRadius = 5;
  characterWidth = 7;
  hasChildren = function(node) {
    return node.children && node.children.length > 0;
  };
  getDepth = function(data, depth) {
    var child, maxDepth, _i, _len, _ref;
    if (!depth) {
      depth = 1;
    }
    if (!hasChildren(data)) {
      return depth;
    }
    maxDepth = depth;
    _ref = data.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      maxDepth = Math.max(getDepth(child, depth + 1), maxDepth);
    }
    return maxDepth;
  };
  draw = function(selector, data) {
    var $target, layoutRoot, leftOffset, link, links, nodeGroup, nodes, size, tree;
    $target = $(selector);
    leftOffset = hasChildren(data) ? data.name.length * characterWidth : 0;
    window.console.log(getDepth(data));
    size = {
      width: $target.width(),
      height: $target.height()
    };
    tree = d3.layout.tree().size([size.height, size.width - leftOffset]).children(function(node) {
      if (hasChildren(node)) {
        return node.children;
      } else {
        return null;
      }
    });
    nodes = tree.nodes(data);
    links = tree.links(nodes);
    layoutRoot = d3.select(selector).append('svg:svg').attr('width', size.width).attr('height', size.height).append('svg:g').attr('transform', 'translate(' + leftOffset + ',0)');
    link = d3.svg.diagonal().projection(function(node) {
      return [node.y, node.x];
    });
    layoutRoot.selectAll('path.link').data(links).enter().append('svg:path').attr('class', 'link').attr('d', link);
    nodeGroup = layoutRoot.selectAll('g.node').data(nodes).enter().append('svg:g').attr('class', 'node').attr('transform', function(node) {
      return 'translate(' + node.y + ',' + node.x + ')';
    });
    nodeGroup.append('svg:circle').attr('r', nodeRadius);
    return nodeGroup.append('svg:text').attr('text-anchor', function(d) {
      if (hasChildren(d)) {
        return 'end';
      } else {
        return 'start';
      }
    }).attr('dx', function(d) {
      if (hasChildren(d)) {
        return -2 * nodeRadius;
      } else {
        return 2 * nodeRadius;
      }
    }).attr('dy', 3).text(function(d) {
      return d.name;
    });
  };
  return {
    Draw: draw
  };
});
